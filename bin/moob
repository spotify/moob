#!/usr/bin/env ruby

require 'optparse'
require 'moob'

options = {
  :actions => [:jnlp],
  :type => :auto,
  :machines => [],
  :password => ENV['PASSWORD'],
  :transport => 'https',
}

OptionParser.new do |opts|
  opts.on '-t', '--type t',
  'LOM type, \'auto\' for autodetection, \'list\' to list',
  'Defaults to auto' do |t|
    if t == 'list'
      Moob::TYPES.each do |sym, klass|
        puts "#{sym} (#{klass.name})"
      end
      exit 0
    else
      options[:type] = t.to_sym
    end
  end

  opts.on '-a', '--actions a,b,c', Array,
  'Actions to perform, \'list\' to list',
  'Defaults to jnlp' do |a|
    if a == ['list']
      Moob::TYPES.each do |sym, klass|
        if klass.actions
          puts "#{sym}:"
          klass.actions.each do |name, descr|
            puts "  #{name}: #{descr}"
          end
        else
          puts "#{sym} doesn't have any actions"
        end
      end
      exit 0
    else
      options[:actions] = a
    end
  end

  opts.on '-u', '--username u',
  'LOM username',
  'Defaults to the model\'s default if known' do |u|
    options[:username] = u
  end

  opts.on '-p', '--password p',
  'LOM password',
  'Defaults to the model\'s default if known',
  'Use the environment variable PASSWORD instead!' do |p|
    options[:password] = p
  end

  opts.on '-m', '--machines a,b,c', Array,
  'Comma-separated list of LOM hostnames (or - to read from stdin)' do |m|
    options[:machines] = m
  end

  opts.on '-n', '--no-ssl' do
    options[:transport] = 'http'
  end

  opts.on '-v', '--verbose' do
    $VERBOSE = true
  end
end.parse!

if options[:machines].empty?
  $stderr.puts 'No LOMs selected.'
  exit 1
elsif options[:machines] == %w[-]
  options[:machines] = $stdin.read.split
end

begin
  options[:machines].each do |h|
    lom = Moob.lom options[:type], h, options

    Moob.inform "Trying to authenticate to #{h}..."
    lom.authenticate
    Moob.inform "Authenticated on #{h}."

    begin
      options[:actions].each do |action|
        action = action.to_sym

        Moob.inform "Trying to perform #{action} on #{h}..."

        case action
        when :jnlp
          Moob.start_jnlp lom
        else
          res = lom.send action
          puts res if res
        end

        Moob.inform "Performed #{action} on #{h}."
      end
    ensure
      lom.logout
      Moob.inform "Logged out of #{h}."
    end
  end
  puts 'There might be a delay before Java Web Start shows up...' if options[:action] == :jnlp

rescue Exception => e
  $stderr.puts "\033[31mFailure: #{e.class} (#{e})\033[0m\n\n" \
    "Backtrace to provide in any support request:\033[2;34m"
  $stderr.puts e.backtrace
  $stderr.puts "\033[0m"
  exit 1
end
